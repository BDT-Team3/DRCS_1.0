
services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: gruppo3
      POSTGRES_PASSWORD: gruppo3
      POSTGRES_DB: california_db
    ports:
      - "5433:5432"
    networks:
      - dcrs_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - dcrs_net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    networks:
      - dcrs_net

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - dcrs_net

  setup_orchestrator:
    build:
      context: ./setup_orchestrator
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - minio
    restart: "no"  # exit after success
    networks:
      - dcrs_net

  img_producer:
    build:
      context: ./img_producer
    depends_on:
      - setup_orchestrator
    restart: always
    networks:
      - dcrs_net

  sens_producer:
    build:
      context: ./sens_producer
    depends_on:
      - setup_orchestrator
    restart: always
    networks:
      - dcrs_net

  create_buckets:
    image: python:3.9
    container_name: create_buckets
    depends_on:
      - minio
    volumes:
      - ./setup_minio:/scripts
    working_dir: /scripts
    command: ["sh", "-c", "pip install boto3 && python create_minio_buckets.py"]
    restart: "no"
    networks:
      - dcrs_net

  flink_jobmanager:
    build:
      context: ./flink_job
    container_name: flink_jobmanager
    depends_on:
      - setup_orchestrator
      - kafka
      - zookeeper
      - minio
    restart: on-failure
    networks:
      - dcrs_net
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    command: /opt/wait-for-it.sh

networks:
  dcrs_net:
    driver: bridge


