
services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: gruppo3
      POSTGRES_PASSWORD: gruppo3
      POSTGRES_DB: california_db
    ports:
      - "5433:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    restart: unless-stopped

  setup_orchestrator:
    build:
      context: ./setup_orchestrator
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - minio
    restart: "no"  # exit after success

  img_producer:
    build:
      context: ./img_producer
    depends_on:
      - setup_orchestrator
    restart: always

  sens_producer:
    build:
      context: ./sens_producer
    depends_on:
      - setup_orchestrator
    restart: always

  img_consumer:
    build:
      context: ./img_consumer
    depends_on:
      - img_producer
      - sens_producer
    restart: always
  
  sens_consumer:
    build:
      context: ./sens_consumer
    depends_on:
      - img_producer
      - sens_producer
    restart: always

